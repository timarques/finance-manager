name: Build Packages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  windows-installer:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-pc-windows-msvc

      - name: Install Dependencies
        run: |
          choco install cmake ninja pkgconfiglite innosetup -y
          
      - name: Build
        run: |
          cmake -G "Ninja" -B build -DBUILD_INSTALLER=ON
          cmake --build build

      - name: Find Installer
        id: find_installer
        run: |
          $installerPath = Get-ChildItem -Path build\bin -Recurse -Name '*installer.exe' | Select-Object -First 1
          echo "installer_path=build\bin\$installerPath" >> $env:GITHUB_ENV
        
      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ env.installer_path }}

  linux-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker
        run: |
          sudo apt update
          sudo apt install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo systemctl start docker
          
      - name: Pull latest Fedora image
        run: docker pull fedora:latest
        
      - name: Build and Test in Container
        run: |
          docker run --rm -v ${{ github.workspace }}:/src fedora:latest bash -c '
            dnf install -y \
              gtk4-devel \
              glib2-devel\
              libadwaita-devel \
              pkg-config \
              cmake \
              ninja-build \
              rust &&\
              cargo\
            cd /src && \
            mkdir -p build && \
            cd build && \
            cmake -G "Ninja" .. && \
            cmake --build . && \
            if [ ! -d "bin" ]; then
              echo "bin directory not found in build/"
              exit 1
            fi && \
            ls -la bin/'
          
  flatpak-manifest:
    needs: [linux-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake\
            ninja-build
        
      - name: Generate Flatpak Manifest
        run: |
          cmake -G "Ninja" -B flatpak-build -DBUILD_FLATPAK=ON
          cmake --build flatpak-build
          
      - name: Find Manifest
        id: find_manifest
        run: |
          manifest_path=$(find flatpak-build -name '*.yml' -print -quit)
          echo "Manifest found: $manifest_path"
          echo "manifest_path=$manifest_path" >> $GITHUB_ENV
        
      - name: Upload Manifest
        uses: actions/upload-artifact@v4
        with:
          name: flatpak-manifest
          path: ${{ env.manifest_path }}
          
  create-release:
    needs: [windows-installer, flatpak-manifest]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: windows-installer

      - name: Download Flatpak Manifest
        uses: actions/download-artifact@v4
        with:
          name: flatpak-manifest

      - name: Find Downloaded Files
        id: find_files
        run: |
          installer_path=$(find . -name '*installer.exe' -print -quit)
          manifest_path=$(find . -name '*.yml' -print -quit)
          echo "installer_path=$installer_path" >> $GITHUB_ENV
          echo "manifest_path=$manifest_path" >> $GITHUB_ENV

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "date_formatted=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Get short SHA
        id: short_sha
        run: echo "short_sha=$(echo $GITHUB_SHA | cut -c1-6)" >> $GITHUB_OUTPUT

      - name: Convert sha to uppercase
        id: uppercase_sha
        run: echo "uppercase_sha=$(echo '${{ github.sha }}' | tr '[:lower:]' '[:upper:]')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.ref_name }}-${{ steps.date.outputs.date }}-${{ steps.short_sha.outputs.short_sha }}
          name: "Release ${{ steps.date.outputs.date_formatted }} SHA: ${{ steps.uppercase_sha.outputs.uppercase_sha }}"
          files: |
            ${{ env.installer_path }}
            ${{ env.manifest_path }}